#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

//Scorri la matrice e controlla se l'angolo fa parte di quelli che prendiamo in cons.
void nonMaximasup(Mat& magn, Mat& orient, Mat& nms){
	for(int i = 0 ; i < magn.rows; i++){
		for (int j = 0 ; j < magn.cols; j++){
			
			//Normalizza angolo
			float angolo = orient.at<float>(i, j);
			if(angolo > 180){
				angolo = angolo -360;
			}
			//controlla angolo e vedo se magn è >= dei suoi vicini se è cosi assengo a nms il valore magn se no lo sopprimo(=0) 
			if( (angolo > -22.5) && (angolo <= 22.5) || (angolo > -157.5) && (angolo <= 157.5)){
				if( magn.at<uchar>(i,j) >= magn.at<uchar>(i,j-1)  && magn.at<uchar>(i,j) >= magn.at<uchar>(i,j+1)){
					nms.at<uchar>(i,j) = magn.at<uchar>(i,j);
				} 
			}
			
			else if( (angolo > -67.5) && (angolo <= -22.5) || (angolo > 112.5 ) && (angolo <= 157.5 )){
				if( magn.at<uchar>(i,j) >= magn.at<uchar>(i-1,j-1)  && magn.at<uchar>(i,j) >= magn.at<uchar>(i+1,j+1)){
					nms.at<uchar>(i,j) = magn.at<uchar>(i,j);
				} 
			}
			
			else if( (angolo > -112.5) && (angolo <= -67.5) || (angolo > 67.5 ) && (angolo <= 112.5 )){
				if( magn.at<uchar>(i,j) >= magn.at<uchar>(i-1,j)  && magn.at<uchar>(i,j) >= magn.at<uchar>(i+1,j)){
					nms.at<uchar>(i,j) = magn.at<uchar>(i,j);
				} 
			}

			else if( (angolo > -157.5) && (angolo <= -112.5) || (angolo > 22.5 ) && (angolo <= 67.5 )){
				if( magn.at<uchar>(i,j) >= magn.at<uchar>(i-1,j+1)  && magn.at<uchar>(i,j) >= magn.at<uchar>(i+1,j-1)){
					nms.at<uchar>(i,j) = magn.at<uchar>(i,j);
				} 
			}

		}
	}
	
	
	imshow("NSM",nms);
	waitKey(0);

}

//Sogliamo l'immagine per ridure falsi positivo o falsi negativi 
void threshold(Mat &nms, Mat& out, int lt, int ht){
	for (int i = 0 ; i <nms.rows; i++){
		for (int j = 0 ; j <nms.cols; j++){
			if(nms.at<uchar>(i,j) > ht)
				out.at<uchar>(i,j) = 255;
			else if (nms.at<uchar>(i,j) < lt)
				out.at<uchar>(i,j) = 0;
			//controllo nel suo interno se ci sono valori >ht per metterli  a 255;
			else if(nms.at<uchar>(i,j) < ht && nms.at<uchar>(i,j) > lt){
				for (int u = -1 ; u <=1 ; u++){
					for (int v = -1 ; v <=1 ; v++){
						if(nms.at<uchar>(i+u,j+v) > ht)
							out.at<uchar>(i+u, v+j) = 255;
					}
				}
			}
		}
	}
	
	imshow("outputCANNY",out);
	waitKey(0);

}

int main(){
	
	Mat img;
	img = imread("building.png",IMREAD_GRAYSCALE);
	
	namedWindow("originale");
	imshow("originale",img);
	waitKey(0);
	
	//1) smussa con un filtro gaussiano 5x5
	Mat gaussian;
	GaussianBlur(img,gaussian,Size(5,5),0,0);

	//2) calcola derivate applicando sobel al risultato di gaussian
	Mat dx,dy;
	Sobel(gaussian,dx,CV_32F,1,0,3);
	Sobel(gaussian,dy,CV_32F,0,1,3);
	
	Mat dx2,dy2;
	Mat magn,orient;
	
	//3) calcola magnitudo(radice quadrata della somma delle derivate alla seconda)
	pow(dx,2,dx2);
	pow(dy,2,dy2);
	sqrt(dx2+dy2,magn);
	
	//4) normalizza per rientrare nel range 0-255
	normalize(magn,magn,0,255,NORM_MINMAX, CV_8U);
	
	//5) calcola orientazione su asse dx e dy, true ti da gli angoli in gradi
	phase(dx,dy,orient,true);
	
	//6) inizializza matrice a 0 che serve per la funzione nonMaximasup
	Mat nms = Mat::zeros(magn.rows,magn.cols,CV_8U);
	nonMaximasup(magn,orient,nms);
	
	Mat out = Mat::zeros(nms.rows, nms.cols, CV_8U);
	
	threshold(nms,out,35,85);
	
	
}