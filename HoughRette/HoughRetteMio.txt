/* Riconosce le rette partedo dagli edge scoperti da Canny*/

#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(){

	Mat img = imread("autostrada.jpg",IMREAD_GRAYSCALE);
	imshow("src",img);
	waitKey(0);
	
	Mat canny;
	//Smussa per eliminare rumore ;		
	GaussianBlur(img,canny,Size(7,7),2,2);
	//usa canny per trovare gli edge su cui lavorare ;
	Canny(canny,canny,50,150,3);
	
	//calcola la distanza tra righe e colonne per avere le righe della matrice dei voti ;
	int dist = hypot(img.rows,img.cols);
	
	//crea matrice voti con la dist e 180 ovvero angoli normalizzati (-90,+90);
	Mat votes = Mat::zeros(dist*2,180,CV_8U);
	
	double rho, theta;
	
	for(int x = 0 ; x <canny.rows; x++){
		for(int y = 0 ; y <canny.cols; y++){

			//controlla solo gli edge forti
			if( canny.at<uchar>(x,y) == 255){
				for(theta = 0 ; theta <180;theta++){
					//formula parametrica invertita tra y e x
					rho = dist+ y* cos((theta -90)* CV_PI/180) + x*sin((theta -90)*CV_PI/180);
					//aumenta il voto 
					votes.at<uchar>(rho,theta)++;	
				}
			}
		
		}
	}

	
	//sogliamo i voti per estrarli 
	for(int r = 0 ; r < votes.rows; r++){
		for(int t = 0 ; t < votes.cols; t++){
			if(votes.at<uchar>(r,t) >= 100){
				theta = (t-90)*CV_PI/180; //normalizzo per avere i radianti 
				int x  = (r-dist)*cos(theta); 
				int y = (r-dist)*sin(theta);

				/*Il segno meno davanti a sin(theta) serve per ottenere una direzione corretta 
				l'asse y Ã¨ invertito in coordinate immagine rispetto ad un normale sistema di coordinate cartesiane.*/

				Point p1 = Point(cvRound(x+dist*(-sin(theta))), cvRound(y+dist*(cos(theta))));
				Point p2 = Point(cvRound(x-dist*(-sin(theta))), cvRound(y-dist*(cos(theta))));
				line(img,p1,p2,Scalar(255),2,0);
			}
		}
	}
	
	
	imshow("out",img);
	waitKey(0);	 
}