
/*Harris trova particolari configurazioni di pixel, nello specifico i corner*/

#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;


int main(){
	
	Mat img = imread("blox.jpg",IMREAD_GRAYSCALE);
	
	Mat dx, dy;
	
	//calcolo derivate rispetto ad x e y 
	Sobel(img,dx,CV_32FC1,1,0,3);
	Sobel(img,dy,CV_32FC1,0,1,3);
	
	//R() = Det -k*trace^2 (R Ã¨ una matrice indice per capire se ci sono angoli o meno)
	//calcolo componenti dx2(C00) e dy2(C11) per calcolare la matrice R 
	Mat C00,C11,C10;
	pow(dx,2,C00);
	pow(dy,2,C11);
	multiply(dx,dy,C10); //C10 = C01 cacolati per le compenenti della matrice indice R
	
	//elimino rumore
	GaussianBlur(C00,C00,Size(7,7),2,0);
	GaussianBlur(C11,C11,Size(7,7),0,2);
	GaussianBlur(C10,C10,Size(7,7),2,2);
	
	Mat determinante, det1, det2, trace,R;
	
	multiply(C00,C11,det1); // calcolo diagonale principale
	multiply(C10,C10,det2); // calcolo diagonale sec.
	pow(C00+C11,2,trace); //calcola la traccia e la elevo al quadrato 
	determinante = det1-det2; // calcolo determinante diagprinc-diagsec 
	R = determinante -0.04 * trace;

	normalize(R,R,0,255,NORM_MINMAX,CV_32FC1);
	
	Mat out = img.clone();
	int soglia = 75;
	for(int i = 0 ; i < R.rows; i++){
		for(int j = 0 ; j<R.cols; j++){
			if ((int)R.at<float>(i,j) > soglia)
				circle(out,Point(j,i),5,Scalar(255),2,8,0);
			
		}
	}

imshow("HARRYS",out);
waitKey(0);
	

}