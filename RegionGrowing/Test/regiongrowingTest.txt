#include <opencv2/opencv.hpp>
#include <stack>

using namespace cv;
using namespace std;

const uchar max_region = 100;
const double min_region = 0.01;

const Point otto[8] {
	Point(-1,-1),
	Point(-1,0),
	Point(-1,1),
	Point(0,-1),
	Point(0,1),
	Point(1,-1),
	Point(1,0),
	Point(1,1)
};

void grow(Mat& img,Mat& mask,Mat& out,Point seed,int th){
	stack<Point> stack;
	stack.push(seed);
	
	while(!stack.empty()){
				
		Point center = stack.top();
		stack.pop();
		
		for(int i = 0 ; i< 8 ; i++){
			Point intorno = center +otto[i];
			
			if(intorno.x <0 || intorno.x > img.cols-1 ||intorno.y <0 || intorno.y > img.rows-1){
				continue;
			}
			else{
				int dis = int( pow(img.at<Vec3b>(intorno)[0] - img.at<Vec3b>(center)[0],2) +
						pow(img.at<Vec3b>(intorno)[1] - img.at<Vec3b>(center)[1],2) + 
						pow(img.at<Vec3b>(intorno)[2] - img.at<Vec3b>(center)[2],2));
				
				if(mask.at<uchar>(intorno) == 0 && out.at<uchar>(intorno) == 0 && dis < th){
					mask.at<uchar>(intorno) = 1;
					stack.push(intorno);
				}

			} 		
		}
	}


}
int main(){
	
	Mat img = imread("portecolorate.jpg",IMREAD_COLOR);
	
	imshow("src",img);
	waitKey(0);
	
	if(img.rows > 500 || img.cols > 500)
		resize(img,img,Size(0,0),0.5,0.5);
	
	int min_region_area = (int)(img.rows*img.cols*min_region);
	uchar padding = 1;
	
	Mat mask = Mat::zeros(img.rows,img.cols,CV_8U);
	Mat out = Mat::zeros(img.rows,img.cols,CV_8U);
	
	for(int x = 0 ; x < img.rows; x++){
		for(int y = 0 ; y < img.cols; y++){
			if(out.at<uchar>(x,y) == 0){
				
				Point p(y,x);
				grow(img,mask,out,p,100);
				
				int somma = (int)sum(mask).val[0];
				
				if(somma > min_region_area){
					
					out+= mask*padding;
					if(++padding > max_region)
						return-1;
				}
				else{out+= mask*255;}
				mask.setTo(0);
			}
		}
	}
	
	imshow("regiongrowing",out);
	waitKey(0);
	
}